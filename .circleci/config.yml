version: 2.0

references:

  getcache: &getcache
    restore_cache:
      keys:
        - npm-packages-{{ .Branch }}-{{ checksum "package-lock.json" }}
        - npm-packages-{{ .Branch }}-
        - npm-packages-

  install_depends: &install_depends
    run:
      name: Install Dependencies
      command: npm install 

  putcache: &putcache
    save_cache:
      paths:
        - node_modules
      key: npm-packages-{{ .Branch }}-{{ checksum "package-lock.json" }}

  container: &container
    docker:
      - image: circleci/node:10.15.1
    working_directory: ~/ami-access-manager

jobs:

  lint:
    <<: *container
    steps:
      - checkout
      - *getcache
      - *install_depends
      - *putcache
      - run:
          Name: Lint
          command: npm run lint

  prettier:
    <<: *container
    steps:
      - checkout
      - *getcache
      - *install_depends
      - *putcache
      - run:
          name: Prettier
          command: npm run pretty-test

  test:
    <<: *container
    steps:
      - checkout
      - *getcache
      - *install_depends
      - *putcache
      - run:
          name: Jest testing
          command: |
            TEST_AMI_ID=$(cat /tmp/json/ami-id.txt)
            npm run test
      - store_test_results:
          path: reports/jest
      - run:
          name: Upload to CodeCov.io
          command: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
      - attach_workspace:
          at: /tmp/workspace

  test_create:
    docker:
      - image: jimrazmus/awscli
    steps:
      - attach_workspace:
          at: ~/ami-access-manager
      - run:
          name: Wait for Image Availability
          command: |
            mkdir -p /tmp/json
            aws ec2 copy-image --source-image-id $DUMMY_AMI_ID --source-region us-east-1 --region us-east-1 --name $CIRCLE_WORKFLOW_JOB_ID | jq -r '.ImageId' > /tmp/json/ami-id.txt
            AMI=$(cat /tmp/json/ami-id.txt)
            aws ec2 wait image-available --image-ids $AMI
      - run:
          name: Initialize Image Permissions
          command: |
            AMI=$(cat /tmp/json/ami-id.txt)
            aws ec2 reset-image-attribute --image-id $AMI --attribute launchPermission
            aws ec2 modify-image-attribute --image-id $AMI --launch-permission "Add=[{UserId=$AWS_ACCT_ID}]"
            aws ec2 describe-images --image-ids ${AMI} | jq â€”r '.Images[0].BlockDeviceMappings[0].Ebs.SnapshotId' > /tmp/json/snapshot.txt
            cat /tmp/json/snapshot.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - json

  test_destroy:
    docker:
      - image: jimrazmus/awscli
    steps:
      - attach_workspace:
          at: ~/ami-access-manager
      - run:
          name: Deregister Image
          command: |
            AMI=$(cat /tmp/json/ami-id.txt)
            aws ec2 deregister-image --image-id $AMI
      - run:
          name: Delete Snapshot
          command: |
            SNAP=$(cat /tmp/json/snapshot.txt)
            aws ec2 delete-snapshot --snapshot-id $SNAP

workflows:
  version: 2
  doit:
    jobs:
      - lint
      - prettier
      - test_create:
          context: aws-dev
          requires:
            - lint
            - prettier
      - test:
          context: aws-dev
          requires:
            - test_create
      - test_destroy:
          context: aws-dev
          requires:
            - test
